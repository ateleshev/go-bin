#!/usr/bin/env bash

function action_doc_test() { # {{{
  render_title    "Tests"
  render_comment  "Run all tests"
  render_command  "go test -race -cover -v"
  render_comment  "Run one test"
  render_command  "go test -race -cover -v -run=%name%"
  render_comment  "Run two tests"
  render_command  "go test -race -cover -v -run=%name_1%\|%name_2%"
  render_comment  "Run part of tests"
  render_command  "go test -race -cover -v -run=%regexp%"
  render_subtitle "Conclusions"
  render_warning  "What are you waiting for? Run 'go test -race' on your code today!"
  render_link     "Details" "https://blog.golang.org/race-detector"
  render_newline
} # }}}

function action_doc_cover() { # {{{
  render_title "Coverage"
  render_comment "Given a coverage profile produced by 'go test'"
  render_command "go test -coverprofile=cover.out"
  render_subtitle "CLI"
  render_comment "Display coverage percentages to stdout for each function"
  render_command "go tool cover -func=cover.out"
  render_subtitle "HTML"
  render_comment "Open a web browser displaying annotated source code"
  render_command "go tool cover -html=cover.out"
  render_newline
} # }}}

function action_doc_bench() { # {{{
  render_title "Benchmarks"
  render_comment "Run all benchmarks"
  render_command "go test -v -run=^$ -benchmem -bench=."
  render_comment "Run one benchmark"
  render_command "go test -v -run=^$ -benchmem -bench=%name%"
  render_comment "Run two benchmarks"
  render_command "go test -v -run=^$ -benchmem -bench=%name_1%\|%name_2%"
  render_comment "Run part of benchmarks"
  render_command "go test -v -run=^$ -benchmem -bench=%regexp%"
  render_subtitle "CPU"
  render_comment "Run all benchmarks with CPU profiling"
  render_command "go test -v -run=^$ -benchmem -benchtime=3s -bench=. -cpuprofile=cpu.1.out | tee cpu.1.profile"
  render_comment "Make improvements to optimize of use CPU ..."
  render_command "go test -v -run=^$ -benchmem -benchtime=3s -bench=. -cpuprofile=cpu.2.out | tee cpu.2.profile"
  render_comment "Compare CPU benchmarks"
  render_command "benchcmp cpu.1.profile cpu.2.profile"
  render_subtitle "Memory"
  render_comment "Run all benchmarks with memory profiling"
  render_command "go test -v -run=^$ -benchmem -benchtime=3s -bench=. -memprofile=mem.1.out | tee mem.1.profile"
  render_comment "Make improvements to optimize of use memory ..."
  render_command "go test -v -run=^$ -benchmem -benchtime=3s -bench=. -memprofile=mem.2.out | tee mem.2.profile"
  render_comment "Compare memory benchmarks"
  render_command "benchcmp mem.1.profile mem.2.profile"
  render_newline
} # }}}

function action_doc_pprof() { # {{{
  render_title "Package profiling"
  render_comment "Usage"
  render_command "go tool pprof [options] [binary] <profile source> ..."
  render_subtitle "CPU"
  render_comment "Analyze CPU results"
  render_command "go tool pprof %package%.test cpu.1.out"
  render_comment "Outputs a graph in PDF format"
  render_command "go tool pprof -pdf %package%.test cpu.1.out > cpu.1.pdf"
  render_subtitle "Memory"
  render_comment "Analyze memory results with display allocated memory size"
  render_command "go tool pprof --alloc_space %package%.test mem.1.out"
  render_comment "Analyze memory results with display allocated object counts"
  render_command "go tool pprof --alloc_objects %package%.test mem.1.out"
  render_newline
} # }}}

function action_doc_gdb() { # {{{
  render_title "Debugging Go Code with GDB"
  render_comment "Pass the '-w' flag to the linker to omit the debug information"
  render_command "go build -ldflags -w prog.go"

  render_subtitle "Getting Started"
  render_comment "Launch GDB, debugging regexp.test:"
  render_command "$ gdb regexp.test"
  render_comment "To help GDB find the Go runtime sources and the accompanying support script, pass your \$GOROOT with the '-d' flag:"
  render_command "$ gdb regexp.test -d \$GOROOT"
  render_comment "If for some reason GDB still can't find that directory or that script, you can load it by hand by telling gdb (assuming you have the go sources in ~/go/):"
  render_command "(gdb) source ~/go/src/runtime/runtime-gdb.py"
  render_command "Loading Go Runtime support."

  render_subtitle "Inspecting the source"
  render_comment "Use the 'l' or 'list' command to inspect source code."
  render_command "(gdb) l"
  render_comment "List a specific part of the source parametrizing 'list' with a function name (it must be qualified with its package name)."
  render_command "(gdb) l main.main"

  render_subtitle "Setting breakpoints"
  render_comment "Set a breakpoint at the TestFind function:"
  render_command "(gdb) b 'regexp.TestFind'"
  render_command "Breakpoint 1 at 0x424908: file regexp/find_test.go, line 148."
  render_comment "Run the program:"
  render_command "(gdb) run"
  render_command "Starting program: regexp.test"
  render_newline
  render_command "Breakpoint 1, regexp.TestFind (t=0xf8404a89c0) at regexp/find_test.go:148"
  render_command "148 func TestFind(t *testing.T) {"
  render_comment "Execution has paused at the breakpoint. See which goroutines are running, and what they're doing:"
  render_command "(gdb) info goroutines"
  render_command "  1  waiting runtime.gosched"
  render_command "* 13  running runtime.goexit"
  render_comment "the one marked with the * is the current goroutine."

  render_subtitle "Conclusions"
  render_warning  "GDB does not understand Go programs well."
  render_link     "Details" "https://golang.org/doc/gdb"
} # }}}

function action_doc_code() { # {{{
  . "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/doc_code"

  case "${1}" in
    recover)   action_code_recover  ;;
    timeout)   action_code_timeout  ;;
    reflect)   action_code_reflect  ;;
    *)         action_code_help     ;;
  esac
} # }}}

function action_doc_help() { # {{{
  echo "Usage: ${NAME} ${ACTION} {test|cover|bench|pprof|gdb|code}"
} # }}}

